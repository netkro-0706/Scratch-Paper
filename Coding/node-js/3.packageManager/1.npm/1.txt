## npm - Node Package Manager
노드의 패키지 매니저
다른 사람들이 만들어 놓은 코드들을 모아놓은 저장소

### package.json
같은 패키지라도 버전별로 기능이 다를 수 있으므로 버전을 기록해 두어야한다.
동일한 버번을 설치하지 않으면 문제가 생길 수 있다.
노드 프로젝트 시작 전 package.json부터 만들고 시작해야한다.(npm init)

package.json
{
  "name": "npm_test", // package 이름
  "version": "1.0.0", // 버전 - 엄격하게 관리 해야됨
  "description": "npm test", // 설명
  "main": "index.js", // entry point로 자바스크립트 실행 파일 진입점. 마지막으로 module.export하는 파일을 지정한다.
  "scripts": { // test commend - 코드를 테스트 할 때 입력할 명령어들
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "kim", // 작성자
  "license": "MIT" // 라이센스 버전 - 오픈소스가 아니면 MIT가 기본적
  "dependencies": { // 배포 후에도 사용 할 패키지들
    "express": "^5.1.0"
  },
  "devDependencies": { // 개발 할 때만 쓰는 패키지들
    "nodemon": "^3.1.10"
  }
}

npx - node package excute
npm i -g xxx - 「-g」 는 글로벌 설치이며 package.json에는 기록되지 않는다. 그러므로 글로벌 설치는 기피중이다.
후임자가 왔을 때 package.json에 있는 버전을 확인하고 운용하기 때문에 어느 패키지가 필요한지 알 수 없기 때문이다.

### SemVer(유의적) 버저닝
- 1.0.1
- 주 버전. 부 버전. 수 버전
- Major.Minor.Patch
Major 바뀌면 하위호환이 되지 않는다.
Minor 하위 버전과 호환되는 수정사항
Patch 기능에 버그를 해결 했을 때

### 버전 기호
^ - 1번째 자리는 고정 ^1.15.0의 경우 "1.xx.x"는 전부 허용 실질적 "^1"
~ - 2번째 자리는 고정 ~1.15.0의 경우 "1.15.x"는 전부 허용
없음 - 버전이 완전 동일
@latest는 최신
@next는 가장 최신 배포판 사용가능(불안정함)
알파/베타/RC 버전이 존재할 가능성도 있음 (rc는 beta후 출시 직전 점검 단계)

패키지 설치 시 버전을 설치 한다면 @뒤에 버전을 붙일 것 - npm i express@3


npm 명령어들
npm outdated - 어느 패키지에 변화가 왔는지 확인
npm update - 패키지 업데이트 마이너 버전까지 올려줌
npm uninstall xxx - 삭제
npm info xxx - 검색한 패키지에 대한 정보들
npm login - npm 로그인(회원가입 필요)
npm whoami - npm 현재 로그인중 유저 확인
npm version - npm의 버전 확인
npm deprecate [패키지명][버전][메시지] - 패키지를 설치할 때 경고 메세지를 띄우게 함
npm publish - 자신이 만든 패키지를 배포
npm unpublish --force - 자신이 만든 패키지를 배포 중단(배포 후 24시간 내에 가능) 
npm ls - 버전 확인
기타 명령어는 docs.npmjs.com의 CLI Commands에서 확인