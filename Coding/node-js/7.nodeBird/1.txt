## 빈 폴더에 package.json을 생성
{
  "name": "nodebird",
  "version": "0.0.1",
  "description": "익스프레스로 만드는 sns",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "kim",
  "license": "ISC",
}

## 시퀄라이즈와 mysql2드라이버를 설치
npm i sequelize mysql2 sequelize-cli

## 시퀄라이즈 초기화
npx sequelize init

## 폴더 및 파일들을 생성
public
passport
routes
views
controllers
app.js
.env

## 라이브러리 설치
npm i express cookie-parser express-session morgan multer dotenv nunjucks
npm i -D nodemon

## app.js 작성

## 데이터 베이스 설정
config/config.json의 password와 database명을 넣어준 뒤에
npx sequelize db:create


# passport
## express에서 인증을 구현해주는 passport 설치, 비밀번호 암호화해주는 bcrypt설치
npm i passport passport-local passport-kakao bcrypt

## app.js에 passport설정 해주기
// passport설정은 반드시 session밑에 붙일것
app.use(passport.initialize())
app.use(passport.session())

## 그리고 passport폴더에 index.js를 생성

## routes에 auth.js를 생성

## passport에 localStrategy.js를 생성

## middleware폴더를 만들고 거기에 index.js를 생성
로그인을 판단하는 미들웨어를 작성

## routes에 auth설정

## controllers에 auth.js 추가
회원가입을 생성

# passport 로그인 구현 정리
auth/login 라우터를 통해 로그인 요청이 들어온다.
라우터에서 passport.authenticate 메서드를 호출
로그인 전략(LocalStrategy)를 수행한다.
로그인 성공 시 사용자 정보 객체와 함께 req.login을 호출
req.login메서드가 passport.serializeUser를 호출한다.
res.session에 사용자 아이디만 저장해서 세션을 생성하고
express-sessino에 설정한 대로 브라우저에 connect.sid세션 쿠기를 전송한다.
로그인 완료

요청이 들어옴
라우터에 요청이 도달하기 전에 passport.session미들웨어가 passport.deserializeUser메서드를 호출한다.
connect.sid세션 쿠키를 읽고 세션 객체를 찾아서 req.session으로 만든다.
req.session에 저장된 아이디로 데이터베이스에서 사용자 조회
조회된 사용자 정보를 req.user에 저장한다.
라우터에서 req.user객체 사용이 가능

passport/index.js의 localstrategy와 kakaoStrategy파일은 각각 로컬로그인과 카카오 로그인전략에 대한 파일이다.
로그인 과정을 처리하는 파일이다.